{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["particleOpt","particles","number","value","size","interactivity","events","onhover","enable","mode","ControlledCarousel","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelect","bind","assertThisInitialized","state","index","direction","selectedIndex","e","setState","_this$state","react_default","a","createElement","Carousel_default","activeIndex","onSelect","Item","className","src","alt","Caption","React","Component","App","particles_default","params","App_ControlledCarousel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAUMA,EAAc,CACNC,UAAa,CACTC,OAAU,CACVC,MAAS,IAEbC,KAAQ,CACND,MAAS,IAGfE,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPC,QAAU,EACVC,KAAQ,cAMxBC,cACJ,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAERQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAEpBA,EAAKU,MAAQ,CACXC,MAAO,EACPC,UAAW,MAPaZ,4EAWfa,EAAeC,GAC1BX,KAAKY,SAAS,CACZJ,MAAOE,EACPD,UAAWE,EAAEF,6CAIR,IAAAI,EACsBb,KAAKO,MAA1BC,EADDK,EACCL,MAAOC,EADRI,EACQJ,UAEf,OACEK,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,YAAaV,EACbC,UAAWA,EACXU,SAAUnB,KAAKI,cAEfU,EAAAC,EAAAC,cAACC,EAAAF,EAASK,KAAV,KACEN,EAAAC,EAAAC,cAAA,OACEK,UAAU,gBACVC,IAAI,+CACJC,IAAI,gBAENT,EAAAC,EAAAC,cAACC,EAAAF,EAASS,QAAV,KACEV,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,yEAGJF,EAAAC,EAAAC,cAACC,EAAAF,EAASK,KAAV,KACEN,EAAAC,EAAAC,cAAA,OACEK,UAAU,gBACVC,IAAI,gDACJC,IAAI,gBAGNT,EAAAC,EAAAC,cAACC,EAAAF,EAASS,QAAV,KACEV,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,uEAGJF,EAAAC,EAAAC,cAACC,EAAAF,EAASK,KAAV,KACEN,EAAAC,EAAAC,cAAA,OACEK,UAAU,gBACVC,IAAI,+CACJC,IAAI,gBAGNT,EAAAC,EAAAC,cAACC,EAAAF,EAASS,QAAV,KACEV,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,uFA5DqBS,IAAMC,WAwGxBC,MAjCf,WAKE,OAEEb,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OAAf,MACIP,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACJc,OAAQ7C,IAFR,MAGG8B,EAAAC,EAAAC,cAACc,EAAD,QClGaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cfa7a6ff.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//import logo from './logo.svg';\nimport './App.css';\n// import particlesJS from 'particles-js';\nimport Particles from 'react-particles-js';\nimport Carousel from 'react-bootstrap/Carousel';\n\n\nconst particleOpt = {\n              \"particles\": {\n                  \"number\": {\n                  \"value\": 50\n              },\n              \"size\": {\n                \"value\": 3\n              }\n          },\n          \"interactivity\": {\n              \"events\": {\n                  \"onhover\": {\n                      \"enable\": true,\n                      \"mode\": \"repulse\"\n              }\n          }\n      }\n}\n\nclass ControlledCarousel extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleSelect = this.handleSelect.bind(this);\n\n    this.state = {\n      index: 0,\n      direction: null,\n    };\n  }\n\n  handleSelect(selectedIndex, e) {\n    this.setState({\n      index: selectedIndex,\n      direction: e.direction,\n    });\n  }\n\n  render() {\n    const { index, direction } = this.state;\n\n    return (\n      <Carousel\n        activeIndex={index}\n        direction={direction}\n        onSelect={this.handleSelect}\n      >\n        <Carousel.Item>\n          <img\n            className=\"d-block w-100\"\n            src=\"holder.js/800x400?text=First slide&bg=373940\"\n            alt=\"First slide\"\n          />\n          <Carousel.Caption>\n            <h3>First slide label</h3>\n            <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n          </Carousel.Caption>\n        </Carousel.Item>\n        <Carousel.Item>\n          <img\n            className=\"d-block w-100\"\n            src=\"holder.js/800x400?text=Second slide&bg=282c34\"\n            alt=\"Third slide\"\n          />\n\n          <Carousel.Caption>\n            <h3>Second slide label</h3>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n          </Carousel.Caption>\n        </Carousel.Item>\n        <Carousel.Item>\n          <img\n            className=\"d-block w-100\"\n            src=\"holder.js/800x400?text=Third slide&bg=20232a\"\n            alt=\"Third slide\"\n          />\n\n          <Carousel.Caption>\n            <h3>Third slide label</h3>\n            <p>\n              Praesent commodo cursus magna, vel scelerisque nisl consectetur.\n            </p>\n          </Carousel.Caption>\n        </Carousel.Item>\n      </Carousel>\n    );\n  }\n}\n\n\nfunction App() {\n//   particlesJS.load('particles-js', 'assets/particles.json', function() {\n//   console.log('callback - particles.js config loaded');\n// });\n\n  return (\n\n    <div className=\"App\"> hi\n        <Particles\n    params={particleOpt} />\n    // <ControlledCarousel/>\n\n    </div>\n     \n      // <header className=\"App-header\">\n      //   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //   <p>\n      //     Edit <code>src/App.js</code> and save to reload.\n      //   </p>\n      //   <a\n      //     className=\"App-link\"\n      //     href=\"https://reactjs.org\"\n      //     target=\"_blank\"\n      //     rel=\"noopener noreferrer\"\n      //   >\n      //     Learn React\n      //   </a>\n      // </header>\n    // </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}